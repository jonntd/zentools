//given a string array of dag nodes, return an int array indicating the index of a node in the array representing a mirror for the node at the present index
global proc int[] rigZenFindOpposites(string $influences[],string $root,int $axis,float $tol)
{		
		$influences=`ls $influences`;
		$root=zenReturnFirstStringItem(`ls $root`);
	
	int	$err;

	string	$axisString;

		if($axis==1) $axisString="X";
		else
		if($axis==2) $axisString="Y";
		else
		if($axis==3) $axisString="Z";
		else
			error("An axis of "+(string($axis))+" is not recognized.");

	int	$opposites[]=`zenFillIntegerArray (size($influences)) -1`;
	
	//this point matrix multiplier offsets the calculations to correspond with the root joint

	string	$pointMatrixMultNode=`createNode pointMatrixMult`;
	
	string	$localSpaceObj=`createNode transform`;
	
	float	$tempFloatArray[]=`xform -q -ws -t $root`;
		xform -ws -t $tempFloatArray[0] $tempFloatArray[1] $tempFloatArray[2] $localSpaceObj;
		
		connectAttr ($localSpaceObj+".worldInverseMatrix[0]") ($pointMatrixMultNode+".inMatrix");
		disconnectAttr ($localSpaceObj+".worldInverseMatrix[0]") ($pointMatrixMultNode+".inMatrix");
		
		delete $localSpaceObj;
			
		setAttr ($pointMatrixMultNode+".vectorMultiply") 1;
		
	//save current dag pose & go to bind pose if there is one
	
	string	$poseNode=`dagPose -s $root`; 
	
	string	$bindPoseNode=zenReturnFirstStringItem(`dagPose -q -bp $root`);
	int	$sucess;
		if(objExists($bindPoseNode))
		{
			$sucess=rigZenGoToPose($bindPoseNode);
			if(!$sucess) error -sl true "Could not achieve pose.";
		}
	
	string	$similarNodes[];
	string	$similarTrs[];
	
	float	$boundingBox_influenceObj[];
	float	$boundingBox_opposingObj[];

	vector	$bbCenter_influenceObj;
	vector	$bbCenter_opposingObj;
		
	string	$type;
	string	$jointType;

	int	$side;
	int	$ancestorCount;
	int	$sideNameID;
	int	$jointLabeled=false;
	
	float	$rp[];
	float	$rootSpaceRP[];
	float	$rootSpaceBBCenter[];
	
	float	$rootSpaceRP_relevantAxis;
	float	$rootSpaceBB_relevantAxis;
		
	string	$tempStringArray[];
	string	$tempStringArray2[];
	                         
	string	$tempString;
	string	$sideName;
	string	$replaceString;
	string	$influenceTr;
	string	$confirmDialogueResult;
	
	float	$boundingBox[];
	string	$shapeNode;
	string	$opposingShape;
	
	vector	$rootSpaceRP_vector;
	vector	$oppositeRP_vector;
	
	int	$centerObj;
	float	$closestDistance;
	string	$closest;
	float	$distance;
	string	$output="";
	
	//progress window
	
		progressWindow -isInterruptable 1 -title "Working" -status "Sorting Influence Objects" -max (size($influences)/2) -progress 0;


		for($i=0;$i<(size($influences));$i++)
		{
			$output="";
			if($opposites[$i]==-1)
			//if there is an opposite already for this node, skip the rest
			{
				$shapeNode="0";
				$centerObj=false;
				
				$side=3;
						
				$type=nodeType($influences[$i]);
				
				//narrow possible matches to nodes of the same type
				
				$similarNodes=stringArrayRemove({$influences[$i]},`ls -et $type $influences`);
				
				if(size(`ls -tr $influences[$i]`))
				{
					$influenceTr=$influences[$i];
					$similarTrs=$similarNodes;
					$shapeNode=zenReturnFirstStringItem(`listRelatives -f -s $influenceTr`);
				}
				else
				{
					$influenceTr=zenReturnFirstStringItem(`listRelatives -p $influences[$i]`);
					$shapeNode=$influences[$i];
				}
				
				if(size($shapeNode))
				{
					if(nodeType($shapeNode)=="cMuscleObject")
					{
						if(size(listConnections("-s",1,"-d",0,$shapeNode+".worldMatrixStart")))
						{
							$tempString=zenReturnFirstStringItem(`listConnections -s 1 -d 0 -sh 1 ($shapeNode+".meshIn")`);
							if(size($tempString))
								$shapeNode=$tempString;
						}
						else
						{
							$shapeNode="";//dont use the shape node if it is a muscle object that has become disconnected
						}
					}
				}
				
				if($influenceTr!=$influences[$i])
				{
					for($n=0;$n<size($similarNodes);$n++)
						$similarTrs[$n]=zenReturnFirstStringItem(`listRelatives -p $similarNodes[$n]`);
				}
					
				//narrow possible matches to objects with same number of ancestors (parents)
				
				if(size($similarNodes)>1)
				{
					$tempStringArray=$similarNodes;
					$tempStringArray2=$similarTrs;
					$similarNodes={};
					$similarTrs={};
					
					$ancestorCount=size(stringToStringArray(zenReturnFirstStringItem(`ls -l $influences[$i]`),"|"));
					
					for($obj in $tempStringArray)
					{
						if($ancestorCount==size(stringToStringArray(zenReturnFirstStringItem(`ls -l $obj`),"|")))
						{
							$similarNodes[(size($similarNodes))]=$obj;       
							if($influenceTr==$influences[$i])
								$similarTrs[(size($similarTrs))]=$obj;
							else
								$similarTrs[(size($similarTrs))]=zenReturnFirstStringItem(`listRelatives -p $obj`);
						}
					}
					
					if(! size($similarNodes))
					{
						$similarNodes=$tempStringArray;	
						$similarTrs=$tempStringArray2;
					}
					
					$output+=("After ancestor count filter "+$influences[$i]+" has "+(string(size($similarNodes)))+"/"+(string(size($influences)))+" matches.\n");
				}
				
				//if influence is a joint, find similarly labeled joints if present
				
				if($type=="joint" && size($similarNodes)>1)
				{
					$jointType=getAttr($influences[$i]+".type");
					$side=getAttr($influences[$i]+".side");
					
					if($jointType != 0 || $side == 1 || $side == 2)
					{
						$jointLabeled=true;
						
						$tempStringArray=$similarNodes;
						$tempStringArray2=$similarTrs;
						$similarNodes={};
						$similarTrs={};

						for($j in $tempStringArray)
						{
							if((getAttr($j+".type"))==$jointType) 
							{	
								$similarNodes[(size($similarNodes))]=$j;
								if($influenceTr==$influences[$i])
									$similarTrs[(size($similarTrs))]=$j;
								else
									$similarTrs[(size($similarTrs))]=zenReturnFirstStringItem(`listRelatives -p $j`);
							}
						}

						if(! size($similarNodes))
						{
							$similarNodes=$tempStringArray;
							$similarTrs=$tempStringArray2;
						}
					}
					$output+=("After joint label filter "+$influences[$i]+" has "+(string(size($similarNodes)))+"/"+(string(size($influences)))+" matches.\n");
				}
				/*

				}*/
				
				//see if object is a center influence
				//$jointLabeled=($jointLabeled || $sideNameID);
				if(!$jointLabeled)
				{	
					$rp=`xform -q -ws -rp $influenceTr`;
					setAttr ($pointMatrixMultNode+".inPoint") $rp[0] $rp[1] $rp[2];
					$rootSpaceRP=`getAttr ($pointMatrixMultNode+".output")`;
					$rootSpaceRP_relevantAxis=`getAttr ($pointMatrixMultNode+".output"+$axisString)`;
					
					if(size($shapeNode))
					{
						$bbCenter_influenceObj=zenArrayToVector(`objectCenter $shapeNode`);
						setAttr ($pointMatrixMultNode+".inPoint") ($bbCenter_influenceObj.x) ($bbCenter_influenceObj.y) ($bbCenter_influenceObj.z);
						$rootSpaceBBCenter=`getAttr ($pointMatrixMultNode+".output")`;
						$bbCenter_influenceObj=zenArrayToVector($rootSpaceBBCenter);
						$rootSpaceBB_relevantAxis=`getAttr ($pointMatrixMultNode+".output"+$axisString)`;
					}
					else
						$rootSpaceBB_relevantAxis=0;

					//test to see if object is centered
					
					if(abs($rootSpaceRP_relevantAxis) <= $tol && abs($rootSpaceBB_relevantAxis) <= $tol)
					{
						$centerObj=true;
						$similarNodes={$influences[$i]};
						$similarTrs={$influenceTr};
						$output+=($influences[$i]+" is a center object");
					}
				}
				
				//narrow possible matches to objects with reflecting rotate pivots
				if(size($similarNodes)>1)
				{
					$tempStringArray=$similarNodes;
					$tempStringArray2=$similarTrs;
					$similarNodes={};
					$similarTrs={};
					
					$rp=`xform -q -ws -rp $influenceTr`;
					setAttr ($pointMatrixMultNode+".inPoint") $rp[0] $rp[1] $rp[2];
					$rootSpaceRP=`getAttr ($pointMatrixMultNode+".output")`;
					$rootSpaceRP_vector=zenArrayToVector($rootSpaceRP);
					
					/*switch($axis)
					{
						case 1:

							$rootSpaceRP_vector=<<(-$rootSpaceRP_vector.x),($rootSpaceRP_vector.y),($rootSpaceRP_vector.z)>>;
							break;

						case 2:

							$rootSpaceRP_vector=<<($rootSpaceRP_vector.x),(-$rootSpaceRP_vector.y),($rootSpaceRP_vector.z)>>;
							break;

						case 3:

							$rootSpaceRP_vector=<<($rootSpaceRP_vector.x),($rootSpaceRP_vector.y),(-$rootSpaceRP_vector.z)>>;
							break;
					}*/
					
					for($n=0;$n<size($tempStringArray);$n++)
					{
						$tempFloatArray=`xform -q -ws -rp $tempStringArray2[$n]`;  
						$tempFloatArray[($axis-1)]=-$tempFloatArray[($axis-1)];
						
						setAttr ($pointMatrixMultNode+".inPoint") $tempFloatArray[0] $tempFloatArray[1] $tempFloatArray[2];
						$oppositeRP_vector=zenArrayToVector(`getAttr ($pointMatrixMultNode+".output")`);
												
						if( mag($rootSpaceRP_vector-$oppositeRP_vector) <= $tol)
						{
							$similarNodes[(size($similarNodes))]=$tempStringArray[$n];
							if($influenceTr==$influences[$i])
								$similarTrs[(size($similarTrs))]=$tempStringArray[$n];
							else
								$similarTrs[(size($similarTrs))]=zenReturnFirstStringItem(`listRelatives -p $tempStringArray[$n]`);
						}
					}
					
					if(! size($similarNodes))
					{
						$similarNodes=$tempStringArray; 
						$similarTrs=$tempStringArray2;
					}
					$output+=("After rotate pivot filter "+$influences[$i]+" has "+(string(size($similarNodes)))+"/"+(string(size($influences)))+" matches.\n");
				}
				
								
				//narrow possible matches to objects with reflecting bounding box centers
				if(size($similarNodes)>1 && size($shapeNode))//only if there is a shape node present, otherwise bounding boxes are innacurate
				{
					$tempStringArray=$similarNodes;
					$tempStringArray2=$similarTrs;
					$similarNodes={};
					$similarTrs={};
					
					$closestDistance=10000000;
					$closest="";
					
					for($n=0;$n<size($tempStringArray);$n++)
					{
						//find the shape node
						if($tempStringArray[$n]==$tempStringArray2[$n])
							$opposingShape=zenReturnFirstStringItem(`listRelatives -s $tempStringArray2[$n]`);
						else
							$opposingShape=$tempStringArray[$n];
						
						if(size($opposingShape))
						{
							if(nodeType($opposingShape)=="cMuscleObject")
							{
								if(size(listConnections("-s",1,"-d",0,$opposingShape+".worldMatrixStart")))
								{
									$tempString=zenReturnFirstStringItem(`listConnections -s 1 -d 0 -sh 1 ($opposingShape+".meshIn")`);
									if(size($tempString))
										$opposingShape=$tempString;
								}
								else
								{
									$opposingShape="";//dont use the shape node if it is a muscle object that has become disconnected
								}
							}
						}
						
						if(size($opposingShape))
						{
							$bbCenter_opposingObj=zenArrayToVector(objectCenter($opposingShape));      
								
							$tempFloatArray=(zenVectorToArray($bbCenter_opposingObj));
							setAttr ($pointMatrixMultNode+".inPoint") $tempFloatArray[0] $tempFloatArray[1] $tempFloatArray[2];
							
							$bbCenter_opposingObj=zenArrayToVector(`getAttr ($pointMatrixMultNode+".output")`);
							
							switch($axis)
							{
								case 1:
	
									$bbCenter_opposingObj=<<(-$bbCenter_opposingObj.x),($bbCenter_opposingObj.y),($bbCenter_opposingObj.z)>>;
									break;
	
								case 2:
	
									$bbCenter_opposingObj=<<($bbCenter_opposingObj.x),(-$bbCenter_opposingObj.y),($bbCenter_opposingObj.z)>>;
									break;
	
								case 3:
	
									$bbCenter_opposingObj=<<($bbCenter_opposingObj.x),($bbCenter_opposingObj.y),(-$bbCenter_opposingObj.z)>>;
									break;
							}
							
							$distance=mag($bbCenter_influenceObj-$bbCenter_opposingObj);
							
							if($distance<$closestDistance)
							{
								$closestDistance=$distance;
								
								$similarNodes={$tempStringArray[$n]};
								if($influenceTr==$influences[$i])
									$similarTrs={$tempStringArray[$n]};
								else
									$similarTrs=`listRelatives -p $tempStringArray[$n]`;
							}
						}
					}
					
					if(! size($similarNodes))
					{
						$similarNodes=$tempStringArray; 
						$similarTrs=$tempStringArray2;
					}
				}
				
				if(size($similarNodes)>1)
				{
					//see if a side is indicated in the object name
					
					$sideNameID=0;
					$sideName="";
					if(`gmatch $influenceTr "*[Ll][Ee][Ff][Tt]*"`)
					{
						$sideNameID=1;
						$sideName=match("[Ll][Ee][Ff][Tt]",$influenceTr);
					}
					
					if(`gmatch $influenceTr "*[Rr][Ii][Gg][Hh][Tt]*"`)
					{
						$sideNameID=2;
						$sideName=match("[Rr][Ii][Gg][Hh][Tt]",$influenceTr);
					}
	
					//see if an opposingly named influence exists
					
					if($sideNameID)
					{
						if($sideNameID==1)
						{
							if(`substring $sideName 1 1`=="L") 
								$replaceString="R";
							else
								$replaceString="r";
	
							if(`substring $sideName 2 2`=="E")
								$replaceString=$replaceString+"IGHT";
							else
								$replaceString=$replaceString+"ight";
						}
						else
						if($sideNameID==2)
						{
							if(`substring $sideName 1 1`=="R") 
								$replaceString="L";
							else
								$replaceString="l";
	
							if(`substring $sideName 2 2`=="I") 
								$replaceString=$replaceString+"EFT";
							else
								$replaceString=$replaceString+"eft";
						}
						
						$tempString=`substitute $sideName $influenceTr $replaceString`;
						
						if(`stringArrayContains $tempString $similarTrs`)
						{
							if($influenceTr==$influences[$i])
							{
								$similarNodes={$tempString};
								$similarTrs=$similarNodes;
							}
							else
							{
								$similarNodes=
								{
									zenReturnFirstStringItem
									(
										zenStringArrayIntersect
										(
											listRelatives("-c",$tempString),
											$similarNodes
										)
									)
								};
								$similarTrs={$tempString};  
							}
						}
						else
							$sideNameID=0;
						
						$output+=("After side name filter "+$influences[$i]+" has "+(string(size($similarNodes)))+"/"+(string(size($influences)))+" matches.\n");
					}
				}
				
				//narrow possible matches to objects with same number of children
				
				if(size($similarNodes)>1)
				{
					$tempStringArray=$similarNodes;
					$tempStringArray2=$similarTrs;
					$similarNodes={};
					$similarTrs={};
					
					$ancestorCount=size(listRelatives("-ad",$influences[$i]));
					
					for($obj in $tempStringArray)
					{
						if($ancestorCount==size(listRelatives("-ad",$obj)));
						{
							$similarNodes[(size($similarNodes))]=$obj;       
							if($influenceTr==$influences[$i])
								$similarTrs[(size($similarTrs))]=$obj;
							else
								$similarTrs[(size($similarTrs))]=zenReturnFirstStringItem(`listRelatives -p $obj`);
						}
					}
					
					if(! size($similarNodes))
					{
						$similarNodes=$tempStringArray;	
						$similarTrs=$tempStringArray2;
					}
					
					$output+=("After child count filter "+$influences[$i]+" has "+(string(size($similarNodes)))+"/"+(string(size($influences)))+" matches.\n");
				}
								
				if(size($similarNodes)>1)
				{
					warning(string(size($similarNodes))+" matches for "+($influences[$i])+".");
					$opposites[$i]=$i;
				}
				else
				if(size($similarNodes)==0)
				{
					warning("No matches for "+($influences[$i])+". Using as center influence.");				
				}
				else
				{
					$opposites[$i]=`zenFirstIndexOfStringInArray ($similarNodes[0]) $influences`;
					$opposites[($opposites[$i])]=$i;
				}	
				
				if(`progressWindow -q -ic`)
				{
					delete $pointMatrixMultNode;
					progressWindow -ep;
					error "User Interupt.";
				}

				progressWindow -e -s 1;	
			}
		}
		
		progressWindow -ep;
		
		delete $pointMatrixMultNode;
		
		rigZenGoToPose($poseNode);
		delete $poseNode;
				
	return	$opposites;
}

