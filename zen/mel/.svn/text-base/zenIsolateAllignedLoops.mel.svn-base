//return alligned edge loop rings
global proc string[] zenIsolateAllignedLoops( string $edges[] )
{
		$edges=`ls -fl $edges`;
		
	string	$obj=zenReturnFirstStringItem( `stringToStringArray $edges[0] "."` );
	string	$origSel[]=`ls -sl`;
	string 	$loopStrings[]=`zenIsolateLoops $edges`;
	
		if(size($loopStrings)<2) return $loopStrings;
		
	string	$cleanedLoopStrings[];
	string	$loop[];
	string	$edgesInLoopRing[];
	string	$edgeRing[];
	int	$testEdgeCompID;
	string	$testEdges[];
	int	$progress;
	string	$intersector=`stringArrayIntersector`;
	string	$testSel[];
	
		if(size($loopStrings)>4 || size($edges)>20)// show/hide progress bar based on the size of the operation
		{
			progressWindow -title "Working" -ii 1 -status "Alligning Edge Loops" -progress 0 -max ( size($edges)+size($loopStrings)*2 );
			progressWindow -title "Working" -ii 1 -status "Alligning Edge Loops" -progress 0 -max (size($edges));
			$progress=1;
		}
	
	//find edges shared by all edge rings
	
		for($i=0;$i<size($loopStrings);$i++)
		{
			$edgesInLoopRing={};
			$loop=`stringToStringArray $loopStrings[$i] ","`;
			
			for($n=0;$n<size($loop);$n++)
			{				
				$testEdgeCompID=`zenCompID $loop[$n]`;
				
				if(`getApplicationVersionAsFloat`>=8)//Maya 8+ optimization
				{
					$edgeRing=`polySelect -ass -ns -er $testEdgeCompID $obj`;
					$edgeRing=`ls -fl $edgeRing`;
				}
				else
				{
					$edgeRing=zenCompFromID($obj,"e",`polySelect -ns -er $testEdgeCompID $obj`);
				}
				$edgesInLoopRing=`stringArrayCatenate $edgesInLoopRing $edgeRing`;
				
				if($progress)
				{
					progressWindow -e -s 1;
					if(`progressWindow -q -ic`==1)
					{
						progressWindow -endProgress;
						deleteUI $intersector;
						error "User Interupt.";
					}
				}
			}
			$edges=`zenStringArrayIntersect $edgesInLoopRing $edges`;
		}

		for($i=0;$i<size($loopStrings);$i++)//remove edges not shared by all edge rings
		{
			$loop=`stringToStringArray $loopStrings[$i] ","`;
			$loop=`zenStringArrayIntersect $loop $edges`;
			$cleanedLoopStrings[$i]=`stringArrayToString $loop ","`;
			
			if($progress)
			{
				progressWindow -e -s 1;
				if(`progressWindow -q -ic`==1)
				{
					progressWindow -endProgress;
					deleteUI $intersector;
					error "User Interupt.";
				}
			}
		}
	
	int	$uneven=false;
	int	$elCount=size(stringToStringArray($cleanedLoopStrings[0],","));
		
	//check to see if the edge loops are of equal length as certain circumstances can cause the above logic to fail
	
		for($ls in $cleanedLoopStrings)
		{
			if(size(stringToStringArray($cleanedLoopStrings[$i],","))!=$elCount)
			{	
				$uneven=true;
				break;
			}
		}
		if($uneven)
			$cleanedLoopStrings=$loopStrings;//revert
		
		$elCount=size(stringToStringArray($loopStrings[0],","));

		for($ls in $loopStrings)//if the original is also not of even length, we will encounter errors later, so better to raise an error now at the cause
			if(size(stringToStringArray($ls,","))!=$elCount) error -sl 1 "Improper selection";	
						
	//reverse loops where necessarry
	
	int	$edgeLoopEndCompID;
	string	$firstEdge;
	int	$flipped[];
	
		if(!$uneven)//if the above logic fails, so will the following, so we use another procedure
		{
			$firstEdge=zenReturnFirstStringItem(`stringToStringArray $loopStrings[0] ","`);
		
			$edgeLoopEndCompID=zenCompID($firstEdge);
			$testEdges=zenCompFromID($obj,"e",`polySelect -ns -er $edgeLoopEndCompID $obj`);
			
			for($i=1;$i<size($cleanedLoopStrings);$i++)
			{
				$loop=`stringToStringArray $cleanedLoopStrings[$i] ","`;
				
				stringArrayIntersector -e -r $intersector;
				stringArrayIntersector -e -i {$loop[0]} $intersector;
				stringArrayIntersector -e -i $testEdges $intersector;
				
				if(size(`stringArrayIntersector -q $intersector`)==0)
				{
					$loop=`zenReverseStringArray $loop`;
					$cleanedLoopStrings[$i]=`stringArrayToString $loop ","`;
				}
				
				if($progress)
				{
					progressWindow -e -s 1;
					if(`progressWindow -q -ic`==1)
					{
						progressWindow -endProgress;
						deleteUI $intersector;
						error "User Interupt.";
					}
				}			
			}
		}
		else
		{
			progressWindow -endProgress;
			$flipped=`zenQueryFlippedEdgeRingPaths 0 $cleanedLoopStrings`;
			for($i=0;$i<size($cleanedLoopStrings);$i++)
				if($flipped[$i])
					$cleanedLoopStrings[$i]=stringArrayToString(zenReverseStringArray(stringToStringArray($cleanedLoopStrings[$i],",")),",");
		}
		
		if($progress)
			progressWindow -endProgress;
		
		deleteUI $intersector;
		select $origSel;
		
	return	$cleanedLoopStrings;
}